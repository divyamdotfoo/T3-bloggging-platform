generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// outside auth

model User {
  id                 String               @id @default(cuid())
  name               String
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  username           String?
  createdAt          DateTime             @default(now())
  posts              Post[]
  comments           Comment[]
  avatar             String?
  bio                String?
  followersNo        Int                  @default(0)
  followingNo        Int                  @default(0)
  followers          User[]               @relation("users")
  following          User[]               @relation("users")
  followingTags      Tag[]
  drafts             Draft[]
  FollowNotification FollowNotification[]
  LikeNotification   LikeNotification[]
  about              String?              @db.LongText()
  techStack          String?              @db.LongText()
  available          String?              @db.LongText()
}

model Draft {
  id        String   @id @default(cuid())
  title     String?  @db.Text()
  content   Json
  userId    String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  bannerImg String?  @db.Text()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String    @id @default(cuid())
  title       String    @db.MediumText()
  content     Json
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  thumbnail   String?   @db.Text()
  blurDataUrl String?   @db.Text()
  createdAt   DateTime  @default(now())
  likes       Int       @default(0)
  views       Int       @default(0)
  commentsNo  Int       @default(0)
  tags        Tag[]
  intro       String    @db.MediumText()
}

model Tag {
  id        String @id @default(cuid())
  post      Post[]
  name      String
  desc      String
  followers Int    @default(0)
  postCount Int    @default(0)
  users     User[]
}

model Comment {
  id      String   @id @default(cuid())
  content String
  date    DateTime @default(now())
  likes   Int
  userId  String
  postId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model FollowNotification {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  userFollowedId String
  createdAt      DateTime @default(now())
}

model LikeNotification {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  userWhoLikedId String
  post           String
  createdAt      DateTime @default(now())
}
